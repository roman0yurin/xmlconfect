package com.mthaler.xmlconfect

import ProductFormat._
import scala.xml.{Null, MetaData, Node}
import scala.reflect.{ClassTag, classTag}
import scala.util.Try

object ProductFormatInstances {

[# // Case classes with 1 parameters
  def xmlFormat1[[#P1 :XF#], T <: Product : ClassTag](construct: ([#P1#]) => T): SimpleXmlElemFormat[T] = {
    val Array([#p1#]) = extractFieldNames(classTag[T])
    xmlFormat(construct, [#p1#])
  }
  def xmlFormat[[#P1 :XF#], T <: Product : ClassTag](construct: ([#P1#]) => T, [#fieldName1: String#]): SimpleXmlElemFormat[T] = new SimpleXmlElemFormat[T] {

    protected override def writeElem(p: T, name: String = "") = {
      val fields = new collection.mutable.ListBuffer[XML]
      [#fields ++= productElement##2Field[P1](fieldName1, p, 0)#
      ]
      elem(if (name.isEmpty) p.productPrefix else name, metaData(fields), children(fields))
    }
    protected def readElem(node: Node, name: String = "") = {
        val defaultArgs = DefaultArgsCache.get(classTag[T].runtimeClass)
        if (defaultArgs.size == 1) {
            [#val p1V = fromField[P1](node, fieldName1, Some(defaultArgs(0).asInstanceOf[P1]))#
            ]
            construct([#p1V#])
        } else {
            [#val p1V = fromField[P1](node, fieldName1)#
            ]
            construct([#p1V#])
        }
    }
  }#

]
}